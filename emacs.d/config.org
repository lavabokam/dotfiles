#+TITLE: Emacs configuration
#+AUTHOR: Lava Kumar Bokam
#+Date: <2017-04-02 Sun>

* Personal Information
  #+BEGIN_SRC emacs-lisp
    (setq user-full-name "Lava Kumar Bokam")
    (setq user-mail-address "lavajnv@gmail.com")
  #+END_SRC
* Package Management
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
    (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
    (add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
    (package-initialize)
    (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
    (setq use-package-verbose t
      use-package-always-ensure t)

    (eval-when-compile
    (require 'use-package))
    (require 'diminish)                ;; if you use :diminish
    (require 'bind-key)                ;; if you use any :bind variant
  #+END_SRC
* EVIL Mode
**  EVIL
   Use of evil mode for vim related bindings
    #+BEGIN_SRC emacs-lisp
      (setq evil-want-integration nil) 
      (use-package evil
        :ensure t
        :config
          (evil-set-initial-state 'term-mode 'emacs)
          (setq evil-emacs-state-cursor '("red" box))
          (setq evil-normal-state-cursor '("green" box))
          (setq evil-visual-state-cursor '("orange" box))
          (setq evil-insert-state-cursor '("red" bar))
          (setq evil-replace-state-cursor '("red" bar))
          (setq evil-multiedit-state-cursor '("green" bar))
          (setq evil-multiedit-insert-state-cursor '("blue" bar))
          (setq evil-operator-state-cursor '("red" hollow))
          (progn (define-key evil-insert-state-map (kbd "C-a") 'move-beginning-of-line) ;; was 'evil-paste-last-insertion
            (define-key evil-insert-state-map (kbd "C-e") 'end-of-line)    ;; was 'evil-copy-from-below
            (define-key evil-insert-state-map (kbd "C-n") 'next-line)      ;; was 'evil-complete-next
            (define-key evil-insert-state-map (kbd "C-p") 'previous-line)  ;; was 'evil-complete-previous
            (define-key evil-insert-state-map (kbd "C-j") 'evil-scroll-down)
            (define-key evil-insert-state-map (kbd "C-k") 'evil-scroll-up)

            (define-key evil-normal-state-map (kbd "C-j") 'evil-scroll-down)
            (define-key evil-normal-state-map (kbd "C-k") 'evil-scroll-up)
            (define-key evil-normal-state-map "U" 'undo-tree-redo)
         ;;   (define-key evil-normal-state-map ">" 'evil-multiedit-match-and-next)
         ;;   (define-key evil-normal-state-map "<" 'evil-multiedit-match-and-prev)
         ;;   (define-key evil-normal-state-map "m" 'evil-multiedit-toggle-marker-here)

         ;;  (define-key evil-visual-state-map ">" 'evil-multiedit-match-and-next)
         ;;   (define-key evil-visual-state-map "<" 'evil-multiedit-match-and-prev)
         ;;   (define-key evil-visual-state-map "m" 'evil-multiedit-toggle-marker-here)
         ;;
         ;;  (define-key evil-visual-state-map "m" 'evil-mc-make-cursor-here)
         ;;  (define-key evil-visual-state-map "M" 'evil-mc-undo-all-cursors)
         ;; (define-key evil-visual-state-map "n" 'evil-mc-make-and-goto-next-match)
          ;;  (define-key evil-ex-map "e" 'helm-find-files)
            (define-key evil-ex-map "n" 'evil-buffer-new)
           ;; (define-key evil-ex-map "b" 'helm-buffers-list)
            (define-key evil-ex-map "x" 'kill-buffer-and-window)
            (define-key evil-ex-map "w" 'save-buffer)
            (define-key evil-ex-map "W" 'save-buffer)
            (define-key evil-ex-map "!" 'shell-command))
         (evil-mode 1))
            
    #+END_SRC
**  EVIL leader
    #+BEGIN_SRC emacs-lisp
      (use-package evil-leader
        :ensure t
        :config
          (setq evil-leader/in-all-states t)
          (global-evil-leader-mode)

          (evil-leader/set-leader ";")
          (evil-leader/set-key
            "b" 'switch-to-buffer
            "w" 'save-buffer
            "c" 'delete-window
            "!" 'shell-command
            "x" 'kill-buffer
            "v" 'split-window-horizontally
            "s" 'split-window-vertically
            "o" 'other-window
            "K" 'evil-scroll-up
            "J" 'evil-scroll-down
            "h" 'evil-window-left
            "j" 'evil-window-down
            "k" 'evil-window-top
            "l" 'evil-window-right
            "n" 'evil-buffer-new))
    #+END_SRC
    #+BEGIN_SRC emacs-lisp
      (use-package evil-surround
        :ensure t
        :config
          (global-evil-surround-mode))
      (use-package evil-indent-textobject
        :ensure t)
    #+END_SRC
    EVIL multiple cursors
    #+BEGIN_SRC emacs-lisp
      (use-package evil-iedit-state
        :ensure t)
    #+END_SRC

**  EVIL Collection
     Reference: https://github.com/jojojames/evil-collection
     #+BEGIN_SRC emacs-lisp
     ;; (use-package evil-collection
     ;;   :after evil
     ;;   :ensure t
     ;;   :config
     ;;   (evil-collection-init))
     #+END_SRC
* User Interface Preferences
**  Emacs Themes
    #+BEGIN_SRC emacs-lisp
      (load-file "~/.emacs.d/themes/blackboard-theme.el")
      (load-theme 'wombat t)
    ;;  (load-theme 'adwaita t)
    ;;  (load-theme 'blackboard t)
    #+END_SRC

**  Font Family and Size
    #+BEGIN_SRC  emacs-lisp
     (setq lava/default-font "Courier New")
     (setq lava/default-font-size 14)
     (setq lava/current-font-size lava/default-font-size)
     (defun lava/set-font-size ()
       (set-frame-font
         (concat lava/default-font "-" (number-to-string lava/current-font-size))))
     (lava/set-font-size)

     (defun lava/reset-text-size ()
       (interactive)
       (text-scale-set 0))
     (define-key global-map (kbd "C-)") 'lava/reset-text-size)
     (define-key global-map (kbd "C-0") 'lava/reset-text-size)
     (define-key global-map (kbd "C-+") 'text-scale-increase)
     (define-key global-map (kbd "C-=") 'text-scale-increase)
     (define-key global-map (kbd "C-_") 'text-scale-decrease)
     (define-key global-map (kbd "C--") 'text-scale-decrease)

    #+END_SRC
**  Mode Line
    #+BEGIN_SRC emacs-lisp
      (require 'spaceline-config)
      (spaceline-spacemacs-theme)
      (display-time-mode t)
      (custom-set-variables
        '(erc-track-position-in-mode-line t)
        '(flyspell-mode-line-string nil)
        '(undo-tree-mode-lighter "")
        '(projectile-mode-line (quote (:eval (format "[%s]" (projectile-project-name))))))
      (custom-set-faces
        '(mode-line
          ((t (:inherit nil :background "Blue" :foreground "gray95" :box (:line-width -1 :color "gray50") :weight light))))
        '(mode-line-inactive
          ((t (:background "gray30" :foreground "grey80")))))
    #+END_SRC
**  Lines
    #+BEGIN_SRC emacs-lisp
      ;; Display line numbers
      (load-file "~/.emacs.d/custom/linumoff.el")
      (set-face-attribute 'linum nil :height 100)
      (global-linum-mode)

      ;; Highlight line
      (when window-system
         (global-hl-line-mode)
         (set-face-attribute hl-line-face nil :underline nil)
         )
    #+END_SRC
**  Treemacs
   #+BEGIN_SRC emacs-lisp
     (use-package treemacs
        :ensure t
        :defer t
        :config
         (progn
            (use-package treemacs-evil
               :ensure t
               :demand t)
            (setq treemacs-follow-after-init  t
               treemacs-width                 25
               treemacs-indentation           2
               treemacs-git-integration       t
               treemacs-collapse-dirs         3
               treemacs-silent-refresh             nil
               treemacs-change-root-without-asking nil
               treemacs-follow-after-init          t
               treemacs-sorting                    'alphabetic-desc
               treemacs-show-hidden-files          t
               treemacs-never-persist              nil
               treemacs-is-never-other-window      nil
               treemacs-goto-tag-strategy          'refetch-index)

         (treemacs-follow-mode t)
         (treemacs-filewatch-mode nil))
       :bind
          (:map global-map
             ;;([f8]        . treemacs-toggle)
             ;;("M-0"       . treemacs-select-window)
            ;; ("C-c 1"     . treemacs-delete-other-windows)
             ("C-x C-t"    . treemacs-toggle)
             ;; ("M-m fT"    . treemacs)
             ;;(" C-t" . treemacs-find-file)
           ))
     (use-package treemacs-projectile
       :defer t
       :ensure t
       :config
       (setq treemacs-header-function #'treemacs-projectile-create-header)
       :bind (:map global-map
                   ("C-x C-p" . treemacs-projectile-toggle)))

   #+END_SRC
**  Menu bar, Tool bar, Scroll bar
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode -1)
      (tool-bar-mode -1)
      (when window-system
      (scroll-bar-mode -1))
    #+END_SRC
**  Spell Check
    #+BEGIN_SRC emacs-lisp
      (use-package flyspell
        :ensure t
        :defer t
        :init
        (progn
          (add-hook 'prog-mode-hook 'flyspell-prog-mode)
          (add-hook 'text-mode-hook 'flyspell-mode))
        :config
          ;; Sets flyspell correction to use two-finger mouse click
          (define-key flyspell-mouse-map [down-mouse-3] #'flyspell-correct-word))
    #+END_SRC
**  Key Hints - Which key
    #+BEGIN_SRC emacs-lisp
      (require 'which-key)
      (which-key-mode)
    #+END_SRC
**  Restart Emacs
     #+BEGIN_SRC emacs-lisp
       (setq confirm-kill-emacs 'y-or-n-p)
       (use-package restart-emacs
        :ensure t
        :bind* (("C-x M-x" . restart-emacs)))
     #+END_SRC
**  Commenting 
     #+BEGIN_SRC emacs-lisp
      (setq-local comment-start "# ")
      (setq-local comment-end "")
      (defun lava/comment-or-uncomment-region-or-line ()
        (interactive)
        (let (beg end)
        (if (region-active-p)
          (setq beg (region-beginning) end (region-end))
          (setq beg (line-beginning-position) end (line-end-position)))
          (comment-or-uncomment-region beg end)))
      (lava/comment-or-uncomment-region-or-line)
     #+END_SRC
**  Custom Settings
    #+BEGIN_SRC emacs-lisp
    ;; (setq  x-meta-keysym 'super
    ;;   x-super-keysym 'meta)
      (setq visible-bell nil)
      (show-paren-mode t)
      (setq-default fill-column 80)
      (setq inhibit-startup-message t)
      (setq initial-scratch-message nil)
      (setq show-paren-delay 0.0)
      (setq default-directory "~/")
      (setq-default cursor-in-non-selected-windows 'hollow)
      (setq-default tab-width 2)
      ;; Camel case word treat differntly
      (add-hook 'prog-mode-hook 'subword-mode)
      ;;  tunrn on sysntac highlight whenever possible
      (global-font-lock-mode t)
      ;;(setq sentence-end-double-space nil))
      (setq compilation-scroll-output t)
      ;; Never Use Tabs, Tabs are Devil's white spaces
      (setq-default indent-tabs-mode nil)
      ;;When you double-click on a file in the Mac Finder open it as a
      ;;buffer in the existing Emacs frame, rather than creating a new
      ;;frame just for that file."
      (setq ns-pop-up-frames nil)
      (delete-selection-mode t)
      ;; Full screen emacs start
      ;;(set-frame-parameter nil 'fullscreen 'fullboth)
      (add-hook 'prog-mode-hook 'subword-mode
      (setq gc-cons-threshold 400000000)
      (add-hook 'after-init-hook (lambda () (setq gc-cons-threshold 800000))))
      (fset 'yes-or-no-p 'y-or-n-p)
      (setq inhibit-startup-message t)
      (setq initial-scratch-message nil)
      (setq max-lisp-eval-depth 10000)      
      (setq max-specpdl-size 10000)  ; default is 1000, reduce the backtrace level
     ;; (setq debug-on-error t)    ; now you should get a backtrace      
      
      (global-set-key (kbd "C-x f") 'find-file )
      (global-set-key (kbd "C-a") 'move-beginning-of-line)
      (global-set-key (kbd "C-e") 'move-end-of-line)

      (defun lava/offer-to-create-parent-directories-on-save ()
        (add-hook 'before-save-hook
          (lambda () (when buffer-file-name
             (let ((dir (file-name-directory buffer-file-name)))
                (when (and (not (file-exists-p dir))
                   (y-or-n-p (format "Directory %s does not exist. Create it?" dir)))
                     (make-directory dir t)))))))
      (lava/offer-to-create-parent-directories-on-save)

      (defun lava/backup-to-temp-directory ()
        (setq backup-directory-alist
          `((".*" . ,temporary-file-directory)))
        (setq auto-save-file-name-transforms
          `((".*" ,temporary-file-directory t))))
      (lava/backup-to-temp-directory)
    #+END_SRC

* Terminal and ENV settings
  #+BEGIN_SRC emacs-lisp
    (setenv "PATH" (concat "/usr/local/bin:" "/Applications/LibreOffice.app/Contents/MacOS:"  (getenv "PATH")))
    (setq exec-path (append exec-path '("/usr/local/bin")))
    (global-set-key (kbd "M-T") 'eshell)
  #+END_SRC

* IVY , Projectile
    #+BEGIN_SRC emacs-lisp
    ;; ag.el
   (use-package ag
     :ensure t
     :config
   (add-hook 'ag-mode-hook 'toggle-truncate-lines)
   (setq ag-highlight-search t)
   (setq ag-reuse-buffers 't))

  ;; ivy
  (use-package ivy
    :ensure t
    :diminish ivy-mode
    :config
    (ivy-mode 1)
    (bind-key "C-c C-r" 'ivy-resume)
    (setq ivy-use-virtual-buffers t))
;swiper invoke in current buffer
   (use-package swiper
     :ensure t
     :bind (("C-c /" . swiper)))
  ;;; counsel
  (use-package counsel
    :ensure t
    :bind
      ("M-x" . counsel-M-x)
      ("C-c f" . counsel-describe-function)
      ("C-c v" . counsel-describe-variable)
      ("C-c k" . counsel-ag)
      ("C-c C-k" . counsel-projectile-ag))
 ; projectile
  (use-package projectile
    :ensure t
    :config
      (projectile-global-mode)
      (setq projectile-mode-line
        '(:eval (format " [%s]" (projectile-project-name))))
      (setq projectile-remember-window-configs t)
      (setq projectile-completion-system 'ivy))

    #+END_SRC
* Source Code & Navigation
**  Dumb jump
    #+BEGIN_SRC emacs-lisp
      (use-package dumb-jump
        :ensure t
        :bind (("C-c C-." . dumb-jump-go)
          ("C-c C-," . dumb-jump-back)
          ("C-c C-/" . dumb-jump-quick-look))
        :config
          (dumb-jump-mode))
    #+END_SRC
**  Counsel Gtags
   #+BEGIN_SRC emacs-lisp
     (use-package counsel-gtags
       :ensure t
       :bind (("C-c C-<return>" . counsel-gtags-dwim)
              ("C-c C-;" . counsel-gtags-go-backward)
              ("C-c C-'" . counsel-gtags-go-forward))) 
   #+END_SRC
**  Company mode
    #+BEGIN_SRC emacs-lisp
      (use-package company
        :ensure t
        :diminish company
        :config
          (progn
            ;; Enable company mode in every programming mode
            ;;(add-hook 'prog-mode-hook 'company-mode)
            (global-company-mode)
            ;; Set my own default company backends
            (setq-default
              company-backends
              '(company-nxml
                company-css
                company-tern
                company-files
                company-restclient
                company-dabbrev-code
                company-gtags
                company-keywords
               ;; company-dabbrev
                company-elisp ))))
      (defun add-pcomplete-to-capf ()
        (add-hook 'completion-at-point-functions 'pcomplete-completions-at-point nil t))
      (add-hook 'org-mode-hook #'add-pcomplete-to-capf)
   #+END_SRC
**  Programming Environments && Modes
*** Haskell
    #+BEGIN_SRC emacs-lisp
     ;;  Reference: https://github.com/serras/emacs-haskell-tutorial/blob/master/tutorial.md
      (use-package haskell-mode
        :ensure t
        :mode "\\.hs"
        :config
          (progn
           ;; Turn on haskell-mode features automatically
           (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
           (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
           (add-hook 'haskell-mode-hook 'haskell-decl-scan-mode)
           (add-hook 'haskell-mode-hook 'haskell-doc-mode)))
    #+END_SRC
*** PureScript
    #+BEGIN_SRC emacs-lisp
      (use-package purescript-mode            ; PureScript mode
        :ensure t)
      (use-package psci                       ; psci integration
        :ensure t)
    #+END_SRC
*** Javascript
    #+BEGIN_SRC emacs-lisp
      (use-package js2-mode
        :ensure t
        :init
          (setq
                js2-basic-offset 2
                js-indent-level 2
                js2-global-externs (list "window" "module" "require" "buster" "sinon" "assert" "refute" "setTimeout" "clearTimeout" "setInterval" "clearInterval" "location" "__dirname" "console" "JSON" "jQuery" "$"))

        (add-hook 'js2-mode-hook
            (lambda ()
              (push '("function" . ?ƒ) prettify-symbols-alist)))

    (add-hook 'js2-mode-hook (lambda () (setq js2-basic-offset 2)))  
    (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode)))
    #+END_SRC
*** plantuml
    #+BEGIN_SRC emacs-lisp
       (setq org-plantuml-jar-path "~/.emacs.d/custom/plantuml.jar")
        (add-to-list
            'org-src-lang-modes '("plantuml" . plantuml))
    #+END_SRC
*** jinja 
    #+BEGIN_SRC emacs-lisp
       (use-package jinja2-mode
           :ensure t)
       (add-to-list 'auto-mode-alist '("\\.jinja\\'" . jinja2-mode))
    #+END_SRC
*** Yaml
    #+BEGIN_SRC emacs-lisp
       (use-package yaml-mode 
          :ensure t)
       (add-to-list 'auto-mode-alist '("\\.yaml\\'" . yaml-mode))
       (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))
    #+END_SRC
*** GO Lang
    reference: https://github.com/nlopes/dotfiles/blob/master/.emacs.d/go.el
    #+BEGIN_SRC emacs-lisp
      (use-package go-projectile
        :ensure t
        :init)

      (use-package go-mode
        :ensure t
        :init
        :config
        (use-package go-errcheck
          :ensure t
        )
        (defun my-go-mode-hook ()
           ;; golang.org/x/tools/cmd/goimports
             (setq gofmt-command "goimports")
             ;; call gofmt before saving
             (add-hook 'before-save-hook 'gofmt-before-save)
             ;;(add-to-list 'exec-path "~/Repos/go/bin")
             ;; Customize compile command to run go build
            (if (not (string-match "go" compile-command))
                (set (make-local-variable 'compile-command)
                        "go build -v && go vet"))
             ;; This proved to be too slow in big projects:
             ;; && go test -short -coverprofile cover.out && go tool cover -func cover.out

            (local-set-key (kbd "C-c C-c") 'compile)
            (local-set-key (kbd "C-c C-g") 'go-goto-imports)
            (local-set-key (kbd "C-c C-k") 'godoc)
            ;; github.com/kisielk/errcheck
           (local-set-key (kbd "C-c C-e") 'go-errcheck)
           (local-set-key (kbd "C-c C-r") 'go-remove-unused-imports)
           ;; Godef jump key binding
           ;; code.google.com/p/rog-go/exp/cmd/godef
           (local-set-key (kbd "M-\"") 'godef-jump)
           ;; use company-go in go-mode
           (set (make-local-variable 'company-backends) '(company-go))
           (company-mode)

           (setenv "GOROOT" (shell-command-to-string ". /etc/zshrc; echo -n $GOROOT"))
           (setenv "GOPATH" (shell-command-to-string ". /etc/zshrc; echo -n $GOPATH")))

         ;; Ensure all linting passes, then use 'go build' to compile, then test/vet
        (defun setup-go-mode-compile ()
        (if (not (string-match "go" compile-command))
          (set (make-local-variable 'compile-command)
             "gometalinter.v1 --deadline 10s && go build -v && go test -v && go vet")))


            (add-hook 'go-mode-hook 'company-mode)
            (add-hook 'go-mode-hook 'go-eldoc-setup)
            (add-hook 'go-mode-hook 'highlight-word-hook)
            (add-to-list 'load-path (concat (getenv "GOPATH")
                                  "/src/github.com/golang/lint/misc/emacs"))
  (require 'golint)
  (add-hook 'go-mode-hook 'my-go-mode-hook)
  (add-hook 'go-mode-hook 'go-doc)
  (add-hook 'go-mode-hook 'setup-go-mode-compile)

  (require 'go-guru)
  (add-hook 'go-mode-hook #'go-guru-hl-identifier-mode)
  )

(eval-after-load 'go-mode
  '(substitute-key-definition 'go-import-add 'helm-go-package go-mode-map))

;; Completion integration
(use-package company-go
  :ensure t
  :after go
  :config
  (setq tab-width 4)

  :bind (:map go-mode-map
              ("M-." . godef-jump)))

;; ElDoc integration
(use-package go-eldoc
  :ensure t
  :config
  (add-hook 'go-mode-hook 'go-eldoc-setup))

;; Linting
(use-package flycheck-gometalinter
  :ensure t
  :config
  (progn
    (flycheck-gometalinter-setup))
    ;; skip linting for vendor dirs
    (setq flycheck-gometalinter-vendor t)
    ;; use in test files
    (setq flycheck-gometalinter-test t)
    ;; only use fast linters
    (setq flycheck-gometalinter-fast t)
    ;; explicitly disable 'gotype' linter
    (setq flycheck-gometalinter-disable-linters '("gotype")))
    

    #+END_SRC
* Version control
  #+BEGIN_SRC emacs-lisp
    (use-package diff-hl
      :defer 1
      :ensure t
      :init
        (diff-hl-flydiff-mode)
        (add-hook 'prog-mode-hook 'turn-on-diff-hl-mode)
        (add-hook 'vc-dir-mode-hook 'turn-on-diff-hl-mode))
     (use-package magit
       :ensure t
       :config
        (setq magit-completing-read-function 'ivy-completing-read)
        (setq magit-auto-revert-mode nil)
       :diminish auto-revert-mode)
      (use-package evil-magit
        :config
        (progn
        (evil-leader/set-key "gs" 'magit-status)))
  #+END_SRC
* Rest Client
   #+BEGIN_SRC emacs-lisp
      (use-package restclient
         :ensure t)
      (use-package ob-restclient
         :ensure t)
      (use-package company-restclient
         :ensure t) 
   #+END_SRC
* Org Mode Preferences
**  Display Preferences
    #+BEGIN_SRC emacs-lisp
      (setq org-ellipsis "⤵")
      ;;(setq org-src-fontify-natively t)
      (setq org-src-tab-acts-natively t)
      (setq org-src-window-setup 'current-window)
    #+END_SRC
*** Org Bullets
    #+BEGIN_SRC emacs-lisp
    (use-package org-bullets
      :ensure t
      :defer 1
      :init (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
    #+END_SRC
**  yasnippet
    #+BEGIN_SRC emacs-lisp
      (require 'yasnippet)
      (yas-global-mode 1)
      (yas-reload-all)
      (defun yas/org-very-safe-expand ()
        (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))
        (add-hook 'org-mode-hook
          (lambda ()
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))
    #+END_SRC
**  Tasks and Notes
    #+BEGIN_SRC emacs-lisp
      (setq org-directory "~/Dropbox/org/")
      (setq org-agenda-files '("~/Dropbox/org/"))
      (setq org-use-fast-todo-selection t)
      (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
          (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE" "MEETING"))))

      (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "red" :weight bold)
          ("NEXT" :foreground "blue" :weight bold)
          ("DONE" :foreground "forest green" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)
          ("MEETING" :foreground "forest green" :weight bold)
          ("PHONE" :foreground "forest green" :weight bold))))

      (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
          ("WAITING" ("WAITING" . t))
          ("HOLD" ("WAITING") ("HOLD" . t))
          (done ("WAITING") ("HOLD"))
            ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
            ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
            ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))

      (setq org-tag-alist '(("WORK" . ?w)
        ("PERSONAL" . ?p)))

      (define-key global-map "\C-cl" 'org-store-link)
      (define-key global-map "\C-ca" 'org-agenda)

      (setq org-agenda-text-search-extra-files '(agenda-archives))
      (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
      (setq org-enforce-todo-dependencies t)
      (setq org-log-done (quote time))
      (setq org-log-redeadline (quote time))
      (setq org-log-reschedule (quote time))

      (add-hook 'org-capture-mode-hook 'evil-insert-state)
    #+END_SRC
**  Evaluate language
    #+BEGIN_SRC emacs-lisp
      (org-babel-do-load-languages
       'org-babel-load-languages
       '((emacs-lisp . nil)
         (sh . t)
         (python . t)
         (sql . t)
         (restclient . t)
      ;; (ditta . t)
         (plantuml . t)))
    #+END_SRC
**  Capture , Refile and Org-Protocol
*** Org Capture
    #+BEGIN_SRC emacs-lisp
      (load-library "org-protocol")
      (setq org-default-notes-file "~/Dropbox/org/refile.org")

      ;; I use C-c c to start capture mode
      (global-set-key (kbd "C-c c") 'org-capture)

      ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, meetings, and org-protocol
      (setq org-capture-templates
        (quote 
         ( ("t" "Todo" entry (file "~/Dropbox/org/refile.org")
            "* TODO %?\n  SCHEDULED: %t\n%U\n%a\n%i\n" :clock-in t :kill-buffer )
           ("r" "Respond" entry (file "~/Dropbox/org/refile.org")
            "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
           ("n" "Note" entry (file "~/Dropbox/org/refile.org")
            "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
           ("w" "org-protocol" entry (file "~/Dropbox/org/refile.org")
            "* TODO Review %c\n%U\n" :immediate-finish t)
           ("m" "Meeting" entry (file "~/Dropbox/org/refile.org")
            "* MEETING with %? :MEETING:\n%U" :clock-in t :clock-resume t)
           ("p" "Phone call" entry (file "~/Dropbox/org/refile.org")
             "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
           ("h" "Habit" entry (file "~/Dropbox/org/refile.org")
            "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"%<<%Y-%m-%d %a .+1d/3d>>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))
    #+END_SRC
*** Org Refile
    #+BEGIN_SRC emacs-lisp

     ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
     (setq org-refile-targets
       (quote ((nil :maxlevel . 9)
         (org-agenda-files :maxlevel . 9))))

   ; Use full outline paths for refile targets - we file directly with IDO
     (setq org-refile-use-outline-path t)

     ;; Targets complete directly with IDO
     (setq org-outline-path-complete-in-steps nil)

     ;;Allow refile to create parent tasks with confirmation
     (setq org-refile-allow-creating-parent-nodes (quote confirm))

     (setq org-indirect-buffer-display 'current-window)

     ;;;; Refile settings
     ;; Exclude DONE state tasks from refile targets
     (defun bh/verify-refile-target ()
       "Exclude todo keywords with a done state from refile targets"
       (not (member (nth 2 (org-heading-components)) org-done-keywords)))

     (setq org-refile-target-verify-function 'bh/verify-refile-target)

    #+END_SRC
*** Emacs Server
    #+BEGIN_SRC emacs-lisp
      ;; (define-key global-map "\C-cx"
      ;;  (lambda () (interactive) (org-capture nil "w")))
      (setq server-socket-dir (expand-file-name "server" user-emacs-directory))
     ;; ( unless (server-running-p) 
      (server-start)
    #+END_SRC
*** Org Capture From Linux
    Key Bind Ctrl+Cmd+C runs " emacsclient  -s ~/.emacs.d/server/server  -ne '(make-capture-frame)' "
   #+BEGIN_SRC emacs-lisp
     (defadvice org-capture-finalize 
         (after delete-capture-frame activate)  
       "Advise capture-finalize to close the frame"  
       (if (equal "org-capture" (frame-parameter nil 'name))  
         (delete-frame)))

     (defadvice org-capture-destroy 
         (after delete-capture-frame activate)  
       "Advise capture-destroy to close the frame"  
       (if (equal "org-capture" (frame-parameter nil 'name))  
         (delete-frame)))  

     (use-package noflet
       :ensure t )
     (defun make-capture-frame ()
       "Create a new frame and run org-capture."
       (interactive)
       (make-frame '((name . "org-capture")))
       (select-frame-by-name "org-capture")
       (delete-other-windows)
       (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
         (org-capture)))
        
   #+END_SRC
* Mail Configuration
** Sending Mail
   #+BEGIN_SRC emacs-lisp
    (require 'smtpmail)
    (setq message-send-mail-function 'smtpmail-send-it
      starttls-use-gnutls t
      smtpmail-starttls-credentials
      '(("smtp.gmail.com" 587 nil nil))
      smtpmail-auth-credentials
      (expand-file-name "~/dotfiles/email/lava.Kumar@juspay.in.gpg")
      auth-sources
      '((:source "~/dotfiles/email/lava.kumar@juspay.in.gpg"))
      smtpmail-default-smtp-server "smtp.gmail.com"
      smtpmail-smtp-server "smtp.gmail.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info nil)
     ;; don't save message to Sent Messages, Gmail/IMAP takes care of this , commenting it for 
     ;; (setq mu4e-sent-messages-behavior 'delete)

   #+END_SRC
** MU mail 
    #+BEGIN_SRC emacs-lisp
           (require 'mu4e)
    (setq mu4e-maildir (expand-file-name "~/.email/lava.kumar@juspay.in"))

   (setq mu4e-drafts-folder "/[Gmail]/Drafts")
   (setq mu4e-sent-folder   "/[Gmail]/Sent Mail")
   (setq mu4e-trash-folder  "/[Gmail]/Trash")

    ;; get mail
    (setq mu4e-get-mail-command "mbsync gmail"
;;        mu4e-html2text-command "w3m -T text/html"
        mu4e-update-interval 300 
        mu4e-headers-auto-update t
        mu4e-compose-signature-auto-include t
        mu4e-compose-signature "")

     (setq mu4e-maildir-shortcuts
        '( ("/INBOX"               . ?i)
           ("/[Gmail]/Sent Mail"   . ?s)
           ("/[Gmail]/Trash"       . ?t)
           ("/[Gmail]/Drafts"    . ?d)
           ("/[Gmail]/All Mail"  . ?a)))

    ;; Show images
    (setq mu4e-show-images t)

    ;; use imagemagick, if available
    ;;(when (fboundp 'imagemagick-register-types)
    ;;  (imagemagick-register-types))

   ;; general emacs mail settings; used when composing e-mail
   ;; the non-mu4e-* stuff is inherited from emacs/message-mode
   (setq mu4e-reply-to-address "lava.kumar@juspay.in"
      user-mail-address "lava.kumar@juspay.in"
      user-full-name  "Lava Kumar")

    ;; a  list of user's e-mail addresses
    (setq mu4e-user-mail-address-list '("lava.kumar@juspay.in"))


   ;; don't save message to Sent Messages, IMAP takes care of this
   (setq mu4e-sent-messages-behavior 'delete)

   ;; spell check
   (add-hook 'mu4e-compose-mode-hook
        (defun lava-compose-hook ()
           (set-fill-column 80)
           (flyspell-mode)))
   
    #+END_SRC
** Mail alert && compose
   #+BEGIN_SRC emacs-lisp
    (use-package mu4e-alert
      :ensure t
      :after mu4e
      :init
         (setq mu4e-alert-interesting-mail-query
        (concat
         "flag:unread"
         " /INBOX"))
        (mu4e-alert-enable-mode-line-display)
        (defun gjstein-refresh-mu4e-alert-mode-line ()
           (interactive)
           (mu4e~proc-kill)
           (mu4e-alert-enable-mode-line-display))
       (run-with-timer 0 60 'gjstein-refresh-mu4e-alert-mode-line))
      (defun no-auto-fill ()
        "Turn off auto-fill-mode."
        (auto-fill-mode -1))
      (add-hook 'mu4e-compose-mode-hook #'no-auto-fill)

      (use-package evil-mu4e
        :ensure t)  
       (require 'org-mu4e)

;;  (use-package mu4e :bind (:map mu4e-compose-mode-map
 ;;                          ("C-c x" . org-mode)))
  (use-package org-mime
    :ensure t
    :bind (:map message-mode-map
           ("C-c h" . org-mime-htmlize))
    :init
     (setq org-mime-preserve-breaks nil)) 
   #+END_SRC
* Misc
